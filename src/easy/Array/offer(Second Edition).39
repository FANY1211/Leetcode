没思路。。。

无敌思路1：
如果将数组 nums 中的所有元素按照单调递增或单调递减的顺序排序，那么下标为
n/2的元素（下标从 0 开始）一定是众数。
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        nums.sort()
        n = len(nums) - 1
        return nums[n//2] 

无敌思路2：
Boyer-Moore投票算法：
遍历数组，有与x相同的count+1,没有就-1
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        n = len(nums)
        count = 1
        x = nums[0]
        for i in range(1,n):
            if nums[i] == x:
                count += 1
            else:
                if count == 0:
                    x = nums[i]
                    count += 1
                else:
                    count -= 1
        
        return x 
                
