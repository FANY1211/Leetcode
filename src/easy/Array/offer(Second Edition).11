class Solution:
    def minArray(self, numbers: List[int]) -> int:
        n = len(numbers)
        min = numbers[0]
        for i in range(n):
            if min > numbers[i]:
               min = numbers[i]
            
        return min
        
if ( numbers.length == 1) return numbers[0]; #前面少一个只有一个元素的判断

虽然也通过了，但是时间复杂度较高，本题本意是考察二分法
其可将 遍历法 的 线性级别 时间复杂度降低至 对数级别 。

检索题目，提取关键词：半有序；有重复元素
思路：
如果中间值大于最右侧数值，中间值在最小值的左侧
如果中间值小于最右侧数值，中间值在最小值的右侧
如果中间值等于最右侧数值，中间值可能在最小值左侧或右侧，但最右侧值有了替代品，左移一位
是不是可以考虑，如果反转数组经过一个轮回又转回来了的情况，也就是当numbers[l] < numbers[r]时，numbers[l]一定是最小值

class Solution:
    def minArray(self, numbers: List[int]) -> int:
        l, r = 0, len(numbers) - 1
        while l < r:
            mid = l + (r - l) // 2
            if numbers[mid] > numbers[r]:
                l = mid + 1
            elif numbers[mid] < numbers[r]:
                r = mid
            else:
                r = r - 1
        return numbers[l]
