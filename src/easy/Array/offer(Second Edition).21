读完题直接的思路是：
1.遍历数组，将奇数取出来，放到一个列表中
2.把原本数组中的奇数在遍历过程中删去 
3.拼接两个列表，奇数列表拼在前面

class Solution:
    def exchange(self, nums: List[int]) -> List[int]:
        list1 = []
        for i in range(len(nums)):
            if nums[i] % 2 == 1:
                list1.append(nums[i])
                del nums[i]
        
        return list1 + nums
这个写法出现了数组越界的错误，一开始总不明白是因为什么
（注意：列表能够内存自动收缩，如果删除某个元素，其他元素会向前递补，导致数组长度缩小，所以会导致数组越界）

写的时候出现的问题：
1.对删除列表中的元素不熟：
pop() 默认弹出最后一个元素，并返回其索引；也可以指定索引使用
remove() 用于删除和某个值相等的元素
del() 可以直接删除整个列表，也可以用于删除指定索引的某个元素

2.对拼接列表不熟：
直接用 + 连接两个列表
extend() x.extend([]),将某个列表的元素追加到另一个列表的后面，extend()里面不能直接用数组名


之后的思路：变成另外的两个数组进行拼接
并且，可以直接遍历数组中的元素啊，不需要用索引作为媒介
时间、空间复杂度均为o(n)
class Solution:
    def exchange(self, nums: List[int]) -> List[int]:
        list1 = []
        list2 = []
        for i in nums:
            if i % 2 == 1:
                list1.append(i)
            else:
                list2.append(i)
        
        return list1 + list2
        
但实际本题如果对空间复杂度提出要求：

使用双指针，前面寻找偶数，后面寻找奇数，然后交换
如果双指针相遇，结束循环
返回数组
时间复杂度o(n) 空间复杂度o(1)

class Solution:
    def exchange(self, nums: List[int]) -> List[int]:
        l, r = 0, len(nums) - 1
        while l < r:
            while l < r and nums[l] % 2 == 1:
                l += 1
            while l < r and nums[r] % 2 == 0:
                r -= 1
            nums[l], nums[r] = nums[r], nums[l]
        
        return nums
