没思路。。。

可以使用collections.Counter(s) 统计字符串中各个字符出现的次数，类似于哈希表？
使用哈希映射统计出字符串中每个字符出现的次数
两次循环，一次统计频数，一次统计第一个频数为1的数字
时间复杂度：O(n)，其中 n 是字符串 s 的长度。我们需要进行两次遍历。
空间复杂度：O(∣Σ∣)，其中Σ 是字符集，在本题中 s 只包含小写字母，因此∣Σ∣≤26。我们需要 O(∣Σ∣) 的空间存储哈希映射。

class Solution:
    def firstUniqChar(self, s: str) -> str:
        fre = collections.Counter(s) #fre的返回值是一个键值对，
        for i in s:
            if fre[i] == 1: #注意这里是中括号
                return i
        return ' '
