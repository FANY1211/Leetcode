思路：
1.最先想到的是使用哈希表，每个数字对应每个数字出现的次数
2.取次数最大的就是众数

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        counts = collections.Counter(nums)   #这里用Counter函数直接计算，返回值就是一个哈希表
        return max(counts.keys(), key = counts.get)   #max(a, key = a.get)    Key的作用是用于评估a中最大的项目的值,不加key的话是输出字典中最大的key值



看到了k大佬的投票法，写了一个：（没大佬那么短，但是好理解）
（1）vote起始是0，如果为0，就来一个数做替补，给它投一票；
（2）如果vote不为0，那就看它和替补意见一致不，不一致就vote-1，一致就+1
（3）看谁能坚持到最后
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        vote = 0
        for i in nums:
            if vote == 0:
                x = i
                vote += 1
            else:
                if i == x:
                    vote += 1
                else:
                    vote -= 1
        return x
    
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        votes = 0
        for num in nums:
            if votes == 0: x = num
            votes += 1 if num == x else -1
        return x
