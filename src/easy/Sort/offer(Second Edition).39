方法一：
使用内置函数排序，并输出中位数，则定是众数
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        nums.sort()
        return nums[len(nums) // 2]
 
 
 方法二:
 使用内置计数函数，返回最大值
 class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        count = collections.Counter(nums)
        return max(count.keys(), key=count.get)
        

总觉得这个排序应该自己写出来，然后写了个冒泡排序：（时间复杂度O(n²) 哈哈哈 执行超过时间限制）
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        r = len(nums) - 1
        while r > 0:
            for i in range(len(nums) - 1):
                if nums[i] > nums[i+1]:
                    nums[i], nums[i+1] = nums[i+1], nums[i]
            r -= 1
        return nums[len(nums) // 2]

那用快排怎么写？（但是也没法通过，时间复杂度太高）
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        def quiclsort(nums, l, r):
            if l >= r: return 
            i, j = l, r 
            while i < j:
                while i < j and nums[l] <= nums[j]: j -= 1
                while i < j and nums[l] >= nums[i]: i += 1
                nums[i], nums[j] = nums[j], nums[i]
            nums[l], nums[i] = nums[i], nums[l]

            quiclsort(nums, l, i - 1)
            quiclsort(nums, i + 1, r) 

        quiclsort(nums, 0, len(nums) - 1)
        return nums[len(nums) // 2
